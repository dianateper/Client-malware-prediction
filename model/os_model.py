from repository import os_manager


class DeviceInfo:
    data = None

    def __init__(self):
        self.data = {'AppVersion':  {"name": os_manager.get_app_version(),
                                     "description": "Defender state information e.g. 4.9.10586.0."},
                     'AvSigVersion': {"name": os_manager.get_av_sig_version(),
                                      "description": "Defender state information e.g. 1.217.1014.0."},
                     'Platform': {"name": os_manager.get_platform(),
                                  "description": "Platform name (of OS related properties and processor property)"},
                     'Processor':  {"name": os_manager.get_processor(),
                                    "description": "This is the process architecture of the installed operating system."},
                     'OsBuild': {"name": os_manager.get_os_build(),
                                 "description": "Build of the current operating system."},
                     'CountryIdentifier': {"name": os_manager.get_country_identifier(),
                                           "description": "ID for the country the machine is located in."},
                     'OsSuite': {"name": os_manager.get_os_suite(),
                                 "description": "Product suite mask for the current operating system."},
                     'OsPlatformSubRelease': {"name": os_manager.get_os_platform_sub_release(),
                                              "description":
                                                  "Returns the OS Platform sub-release (Windows Vista, Windows 7, Windows 8, TH1, TH2)."},
                     'SkuEdition': {"name": os_manager.get_sku_edition(),
                                    "description": " The goal of this feature is to use the Product Type defined in the MSDN to map to a 'SKU-Edition' name that is useful in population reporting. The valid Product Type are defined in %sdxroot%\data\windowseditions.xml. This API has been used since Vista and Server 2008, so there are many Product Types that do not apply to Windows 10. "},
                     'IsProtected': {"name": os_manager.get_is_protected(),
                                     "description": " This is a calculated field derived from the Spynet Report's AV Products field. Returns: a. TRUE if there is at least one active and up-to-date antivirus product running on this machine. b. FALSE if there is no active AV product on this machine, or if the AV is active, but is not receiving the latest updates. c. null if there are no Anti Virus Products in the report. Returns: Whether a machine is protected."},
                     'SmartScreen': {"name": os_manager.get_smart_screen(),
                                     "description":
                                         "Windows Defender SmartScreen helps to protect your employees if they try to visit sites previously reported as phishing or malware websites, or if an employee tries to download potentially malicious files. This only applies to Win 10 and Win 10 mobile."},
                     'Firewall': {"name": os_manager.get_firewall(),
                                  "description": "This attribute is true (1) for Windows 8.1 and above if windows firewall is enabled, as reported by the service."},
                     'AVProductsInstalled': {"name": os_manager.get_av_products_installed(),
                                             "description": "Assuming this to be the number of anti-virus products installed. 90% of the machines have 1-2 products installed. "},
                     'IsSxsPassiveMode ': {"name": os_manager.get_is_sxs_passive_mode(), "description": "Google searches suggest that this a active/passive mode of operation for Windows Defender. If another third party primary antivirus exists on the system, the Defender enters Passive mode. "},
                     'Census_MDC2FormFactor': {"name": os_manager.get_census_mdc2_form_factor(), "description": "A grouping based on a combination of Device Census level hardware characteristics. The logic used to define Form Factor is rooted in business and industry standards and aligns with how people think about their device. (Examples: Smartphone, Small Tablet, All in One, Convertible...)"},
                     'LocaleEnglishNameIdentifier ':
                         {"name": os_manager.get_locale_english_name_identifier(),
                          "description": "English name of Locale ID of the current user."},
                     'Census_ProcessorCoreCount':
                         {"name": os_manager.get_census_processor_core_count(),
                          "description": "Number of logical cores in the processor. "},
                     'Census_PrimaryDiskTotalCapacity':
                         {"name": os_manager.get_census_primary_disk_total_capacity(),
                          "description": "Amount of disk space on primary disk of the machine in MB."},
                     'Census_PrimaryDiskTypeName':
                         {"name": os_manager.get_census_primary_disk_type_name(),
                          "description": "Friendly name of Primary Disk Type - HDD or SSD."},
                     'Census_SystemVolumeTotalCapacity':
                         {"name": os_manager.get_census_system_volume_total_capacity(),
                          "description": "The size of the partition that the System volume is installed on in MB."},
                     'Census_HasOpticalDiskDrive':
                         {"name": os_manager.get_census_has_optical_disk_drive(),
                          "description": "True indicates that the machine has an optical disk drive (CD/DVD). "},
                     'Census_TotalPhysicalRAM': {"name": os_manager.get_total_physical_ram(),
                                                 "description": "Retrieves the physical RAM in MB."},
                     'Census_ChassisTypeName': {"name": os_manager.get_chassis_type_name(),
                                                "description":
                                                    "Retrieves a numeric representation of what type of chassis the machine has. "},
                     'Census_InternalPrimaryDiagonalDisplaySizeInInches':
                        {"name": os_manager.get_census_internal_primary_diagonal_display_size_in_inches(),
                         "description": "Retrieves the physical diagonal length in inches of the primary display. "},
                     'Census_InternalPrimaryDisplayResolutionHorizontal':
                        {"name": os_manager.get_census_internal_primary_diagonal_resolution_horizontal(),
                         "description":
                             "Retrieves the number of pixels in the horizontal direction of the internal display. "},
                     'Census_InternalPrimaryDisplayResolutionVertical':
                        {"name": os_manager.get_census_internal_primary_diagonal_resolution_vertical(),
                         "description":
                             "Retrieves the number of pixels in the vertical direction of the internal display. "},

                     'Census_PowerPlatformRoleName':
                         {"name": os_manager.get_census_power_platform_role_name(),
                          "description":
                              "Indicates the OEM preferred power management profile. This value helps identify the basic form factor of the device"},
                     'Census_InternalBatteryNumberOfCharges':
                         {"name": os_manager.get_census_internal_battery_number_of_charges(),
                          "description": "Assuming this to be the number of battery cycles."},

                     'Census_OSVersion': {"name": os_manager.get_census_os_version(),
                                          "description": " Numeric OS version"},
                     'Census_OSBuildNumber': {"name": os_manager.get_census_os_build_number(),
                                              "description": "OS Build number extracted from the OsVersionFull."},

                     'Census_OSBranch': {"name": os_manager.get_census_os_branch(),
                                         "description": "Branch of the OS extracted from the OsVersionFull. "},

                     'Census_OSBuildRevision': {"name": os_manager.get_census_os_build_revision(),
                                                "description": "OS Build revision extracted from the OsVersionFull."},
                     'Census_OSEdition': {"name": os_manager.get_census_os_edition(),
                                          "description": "Edition of the current OS. "},
                     'Census_OSWUAutoUpdateOptionsName':
                         {"name": os_manager.get_census_os_wu_auto_update_options_name(),
                          "description": " Friendly name of the WindowsUpdate auto-update settings on the machine."},
                     'Census_GenuineStateName':
                         {"name": os_manager.get_census_genuine_state_name(),
                          "description": "Friendly name of OSGenuineStateID"},
                     'Census_ActivationChannel':
                         {"name": os_manager.get_census_activation_channel(),
                          "description": "Retail license key or Volume license key for a machine."},
                     'Census_IsSecureBootEnabled':
                         {"name": os_manager.get_census_is_secure_boot_enable(),
                          "description": "Indicates if Secure Boot mode is enabled."},
                     'Census_IsTouchEnabled': {"name": os_manager.get_census_is_touch_enable(),
                                               "description": "Is this a touch device."},
                     'Census_IsPenCapable': {"name": os_manager.get_census_is_pen_capable(),
                                             "description": "Is the device capable of pen input"},
                     'Wdft_IsGamer': {"name": os_manager.get_wdft_is_gamer(),
                                      "description": "Indicates whether the device is a gamer device or not based on its hardware combination."}
                     }

    def get_device_data(self):
        return self.data

