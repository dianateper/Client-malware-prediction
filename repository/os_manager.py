import locale
import platform
import re
import subprocess
import winreg

SKU_EDITION_LIST = ['home', 'pro', 'enterprise', 'education', 'enterprise ltsb', 'cloud', 'server', 'invalid']

CHASSIS_TYPES = {1: 'other', 2: 'unknown', 3: 'desktop', 4: 'lowprofiledesktop', 5: 'pizzabox', 6: 'minitower',
                 7: 'tower', 8: 'portable', 9: 'laptop', 10: 'notebook', 11: 'handheld', 12: 'dockingstation',
                 13: 'allinone', 14: 'subnotebook', 15: 'spacesaving', 16: 'lunchbox', 17: 'mainsystemchassis',
                 18: 'expansionchassis', 19: 'subchassis', 20: 'busexpansionchassis', 21: 'peripheralchassis',
                 22: 'storagechassis', 23: 'rackmountchassis', 24: 'sealedcasepc', 30: 'tablet', 31: 'convertible',
                 32: 'detachable'}

CHEMISTRY = {1: 'Other', 2: 'Unknown', 3: 'Lead Acid', 4: 'Nickel Cadmium', 5: 'Nickel Metal Hydride', 6: 'Lithium-ion',
             7: 'Zinc air', 8: 'Lithium Polymer'}

LICENSE_STATUS = {0: 'invalidlicense', 1: 'isgenuine', 2: 'isgenuine', 3: 'isgenuine', 4: 'invalidlicense',
                  5: 'offline', 6: 'isgenuine'}

MDC2_FORM_FACTOR = {1: 'other', 2: 'unknown', 3: 'desktop', 4: 'lowprofiledesktop', 5: 'pizzabox', 6: 'minitower',
                    7: 'tower', 8: 'portable', 9: 'laptop', 10: 'notebook', 11: 'handheld', 12: 'dockingstation',
                    13: 'allinone', 14: 'subnotebook', 15: 'spacesaving', 16: 'lunchbox', 17: 'mainsystemchassis',
                    18: 'expansionchassis', 19: 'subchassis', 20: 'busexpansionchassis', 21: 'peripheralchassis',
                    22: 'storagechassis', 23: 'rackmountchassis', 24: 'sealedcasepc', 30: 'tablet', 31: 'convertible',
                    32: 'detachable'}

AU_OPTION = {2: 'notify', 3: 'downloadnotify', 4: 'autoinstallandrebootatmaintenancetime', 5: 'fullauto'}

GPU_NAMES = ['RX 560', 'GeForce GTX 1050', 'GeForce GTX 1650', 'RX 570', 'RX 580', 'RX 590', 'GeForce 1060',
             'GeForce 1660', 'RX Vega 56', 'RX Vega 64', 'GeForce GTX 1070', 'RX Vega 64 LC', 'GeForce GTX 1080',
             'RX 5700', 'VII', 'GeForce RTX 2070', 'RX 5700 XT', 'GeForce RTX 2070 Super', 'GeForce rTX 2080',
             'GeForce RTX 2080 Super']


def get_from_reg(path, name, current_user=None):
    if current_user is None:
        current_user = winreg.HKEY_LOCAL_MACHINE
    try:
        registry_key = winreg.OpenKey(current_user, path, 0,
                                      winreg.KEY_READ)
        value, regtype = winreg.QueryValueEx(registry_key, name)
        winreg.CloseKey(registry_key)
        return value
    except:
        pass


def run_powershell(cmd):
    process = subprocess.Popen(["powershell", "-Command", cmd], stdout=subprocess.PIPE)
    out = process.communicate()[0].decode('utf-8').strip()
    return out


def get_engine_version():
    reg_path = r"SOFTWARE\Microsoft\Windows Defender\Signature Updates"
    name = "EngineVersion"
    return get_from_reg(reg_path, name)


def get_app_version():
    reg_path = \
        r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Update\TargetingInfo\DynamicInstalled\DefenderPlatform.amd64"
    name = "Version"
    return get_from_reg(reg_path, name)


def get_av_sig_version():
    reg_path = r"SOFTWARE\Microsoft\Windows Defender\Signature Updates"
    name = "AVSignatureVersion"
    return get_from_reg(reg_path, name)


def get_has_tmp():
    return run_powershell(' get-tpm | select -ExpandProperty TpmPresent')


def get_platform():
    return (platform.system() + platform.release()).lower()


def get_processor():
    processor = platform.architecture()[0]
    if 'bit' in processor:
        processor = 'x' + processor.replace('bit', '')
    return processor


def get_os_ver():
    os_ver = run_powershell('(Get-CimInstance Win32_OperatingSystem).version')
    return '.'.join(os_ver.split('.')[0:2]) + '.0.0'


def get_os_build():
    reg_path = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    name = "CurrentBuild"
    return int(get_from_reg(reg_path, name))


def get_os_suite():
    return int(run_powershell('Get-CimInstance Win32_OperatingSystem | select -ExpandProperty SuiteMask'))


def get_os_platform_sub_release():
    sub = get_census_os_branch()
    if '_release' in sub:
        sub = str.replace(sub, '_release', '')
    return sub


def get_os_build_lab():
    reg_path = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    name = "BuildLabEx"
    return get_from_reg(reg_path, name)


def get_sku_edition():
    reg_path = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    name = "ProductName"
    name = get_from_reg(reg_path, name).lower()
    for edition in SKU_EDITION_LIST:
        if edition in name:
            return edition
    return None


def get_is_protected():
    reg_path = r"SYSTEM\CurrentControlSet\Services\SecurityHealthService"
    name = "Start"
    return int(get_from_reg(reg_path, name) != 4)


def get_auto_sample_opt_in():
    reg_path = r"SOFTWARE\Microsoft\Windows Defender\Spynet"
    name = "SubmitSamplesConsent"
    return get_from_reg(reg_path, name) != 0


def get_pua_mode():
    reg_path = r"SOFTWARE\Microsoft\Windows Defender"
    name = "PUAProtection"
    return get_from_reg(reg_path, name) == 1


def get_s_mode():
    reg_path = r"SYSTEM\ControlSet001\Control\CI\Policy"
    name = "SkuPolicyRequired"
    return get_from_reg(reg_path, name) == 1


def get_smart_screen():
    reg_path = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer"
    name = "SmartScreenEnabled"
    return get_from_reg(reg_path, name).lower() if get_from_reg(reg_path, name) != '' else 'unknown'


def get_firewall():
    reg_path = r"SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile"
    name = "EnableFirewall"
    return int(get_from_reg(reg_path, name) != 0)


def get_uac_lua_enable():
    reg_path = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
    name = "EnableLUA "
    return get_from_reg(reg_path, name) == 1


def get_locale_english_name_identifier():
    return int(run_powershell('Get-Culture | ft LCID -HideTableHeaders'))


def get_country_identifier():
    return run_powershell(" Invoke-RestMethod \"http://ip-api.com/json/$ip\" | ft country -HideTableHeader")


def get_av_products_installed():
    function = """function getAntivirusName {
        $wmiQuery = "SELECT * FROM AntiVirusProduct"
        $antivirus = Get-WmiObject -Namespace "root\SecurityCenter2" -Query $wmiQuery  @psboundparameters -ErrorVariable myError -ErrorAction 'SilentlyContinue'

        if($antivirus){
            return $antivirus.displayName
            }else{
                $alternateAntivirusQuery=WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct GET displayName /Format:List|?{$_.trim() -ne ""}|%{$_ -replace "displayName=",""}
                if ($alternateAntivirusQuery){
                    return $alternateAntivirusQuery
                    }else{
                        write-host "No antivirus software were detected. Hence, namespace querying errors."
                        $rawSearch=((get-wmiobject -class "Win32_Process" -namespace "root\cimv2" | where-object {$_.Name.ToLower() -match "antivirus|endpoint|protection|security|defender|msmpeng"}).Name | Out-String).Trim();
                        if($rawSearch){
                            return $rawSearch
                            }else{
                                return "No antivirus detected."
                                }
                        }

                }
        }
getAntivirusName;"""
    return len(run_powershell(function).split(','))


def get_is_sxs_passive_mode():
    return 0 if run_powershell(" Get-MpComputerStatus | ft AMRunningMode -HideTableHeaders") == "Normal" else 1


def get_census_mdc2_form_factor():
    return MDC2_FORM_FACTOR[int(run_powershell('(Get-CimInstance -ClassName Win32_SystemEnclosure).ChassisTypes'))]


def get_census_processor_core_count():
    return int(run_powershell('(Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors'))


def get_census_primary_disk_total_capacity():
    locale.setlocale(locale.LC_ALL, 'nl_NL')
    return locale.atof(run_powershell(
        'Get-Disk | Where-Object IsSystem -eq $True | ft -AutoSize @{n="Size";e={[math]::Round($_.Size/1MB)}} -HideTableHeaders'))


def get_census_primary_disk_type_name():
    friendly_name = run_powershell('Get-Disk | Where-Object IsSystem -eq $True | ft FriendlyName -HideTableHeaders')
    return run_powershell(
        'Get-PhysicalDisk | Where-Object {$_.FriendlyName -Match "' + friendly_name + '"} | ft MediaType -HideTableHeaders').lower()


def get_census_system_volume_total_capacity():
    locale.setlocale(locale.LC_ALL, 'nl_NL')
    disk_number = run_powershell('Get-Disk | Where-Object IsSystem -eq $True | ft Number -HideTableHeaders')
    return locale.atof(run_powershell(
        ' Get-Partition -DiskNumber ' + disk_number + ' | Where-Object -FilterScript {$_.Type -Eq "Basic"} |  ft -AutoSize @{n="Size";e={[math]::Round($_.Size/1MB)}} -HideTableHeaders'))


def get_census_has_optical_disk_drive():
    return int(run_powershell('Get-WMIObject Win32_CDROMdrive | Select -Expand MediaLoaded') != '')


def get_total_physical_ram():
    return int(run_powershell(
        '(Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).sum /1mb'))


def get_chassis_type_name():
    return CHASSIS_TYPES[int(run_powershell('(Get-CimInstance -ClassName Win32_SystemEnclosure).ChassisTypes'))]


def get_census_internal_primary_diagonal_display_size_in_inches():
    height = float(run_powershell(
        'Get-CimInstance -Namespace root\wmi -ClassName WmiMonitorBasicDisplayParams | \
        ft MaxVerticalImageSize -HideTableHeaders'))
    width = float(run_powershell(
        'Get-CimInstance -Namespace root\wmi -ClassName WmiMonitorBasicDisplayParams | \
        ft MaxHorizontalImageSize -HideTableHeaders'))
    return round((pow(height / 2.54, 2) + pow(width / 2.54, 2)) ** 0.5, 2)


def get_census_internal_primary_diagonal_resolution_horizontal():
    return int(run_powershell('Get-CimInstance -ClassName Win32_DesktopMonitor | ft ScreenWidth -HideTableHeaders'))


def get_census_internal_primary_diagonal_resolution_vertical():
    return int(run_powershell('Get-CimInstance -ClassName Win32_DesktopMonitor | ft ScreenHeight -HideTableHeaders'))


def get_census_power_platform_role_name():
    return run_powershell('Get-ComputerInfo | ft powerplatformrole -HideTableHeaders').lower()


def get_census_internal_battery_type():
    return CHEMISTRY[int(run_powershell('Get-CimInstance -ClassName Win32_Battery | ft Chemistry -HideTableHeaders'))]


def get_census_internal_battery_number_of_charges():
    chassis_name = get_chassis_type_name()
    if chassis_name in ['laptop', 'notebook']:
        return 0
    return int(run_powershell('@(Get-CimInstance -ClassName Win32_Battery).Count'))


def get_census_os_version():
    return run_powershell('Get-ComputerInfo | ft OsHardwareAbstractionLayer  -HideTableHeaders')


def get_census_os_architecture():
    return platform.machine().lower()


def get_census_os_branch():
    reg_path = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    name = "BuildBranch"
    return get_from_reg(reg_path, name)


def get_census_os_build_number():
    reg_path = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    name = "CurrentBuild"
    return int(get_from_reg(reg_path, name))


def get_census_os_build_revision():
    return int(run_powershell('[System.Environment]::OSVersion.Version | ft Revision -HideTableHeaders'))


def get_census_os_edition():
    reg_path = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    name = "EditionID"
    return get_from_reg(reg_path, name).lower()


def get_census_os_sku_name():
    p = re.compile(r'([a-z])([A-Z])')
    return re.sub(p, r"\1_\2", get_census_os_edition()).upper()


def get_census_os_wu_auto_update_options_name():
    reg_path = r"SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
    name = "AUOptions"
    au = get_from_reg(reg_path, name)
    if au is None:
        return 'unknown'
    return AU_OPTION[int(au)]


def get_census_is_portable_operation_system():
    reg_path = r"SYSTEM\CurrentControlSet\Control"
    name = "PortableOperatingSystem"
    return get_from_reg(reg_path, name) == 0


def get_census_genuine_state_name():
    return LICENSE_STATUS[int(run_powershell(
        'Get-CimInstance SoftwareLicensingProduct -Filter "Name like \'Windows%\'" | where { $_.PartialProductKey } | ft LicenseStatus -HideTableHeaders'))]


def get_census_activation_channel():
    return (run_powershell(
        '(Get-WmiObject -query \'select * from SoftwareLicensingService\').OA3xOriginalProductKeyDescription').split(
        ' ')[-1]).lower()


def get_census_is_flights_disabled():
    reg_path = r"SYSTEM\CurrentControlSet\Control\RadioManagement\SystemRadioState"
    name = ""
    return get_from_reg(reg_path, name)


def get_census_is_secure_boot_enable():
    reg_path = r"SYSTEM\CurrentControlSet\Control\SecureBoot\State"
    name = "UEFISecureBootEnabled"
    return get_from_reg(reg_path, name)


def get_census_is_virtual_device():
    return 0 if (run_powershell(
        '((Get-WmiObject win32_computersystem).model -eq \'VMware Virtual Platform\' -or ((Get-WmiObject win32_computersystem).model -eq \'Virtual Machine\'))')) == 'False' else 1


def get_census_is_touch_enable():
    return int(run_powershell(' Get-PnpDevice | ?{$_.FriendlyName -match \'touch screen\'}') != '')


def get_census_is_pen_capable():
    return int(run_powershell(' Get-PnpDevice | ?{$_.FriendlyName -match \'pen\'}') != '')


def get_wdft_is_gamer():
    arch = int(''.join(x for x in platform.architecture()[0] if x.isdigit()))
    ram = int(get_total_physical_ram())
    processor = run_powershell('Get-WmiObject Win32_Processor |  ft Name -HideTableHeaders')
    graphics = run_powershell('Get-WmiObject Win32_VideoController | ft Name -HideTableHeaders')
    graphic_cards = graphics.split('\r\n')

    arch_bool = False
    ram_bool = False
    processor_bool = False
    gpu_bool = False

    min_arch = [64, 84]
    min_ram = 8000
    min_processors = ['i5', 'i7']

    if arch in min_arch:
        arch_bool = True

    if ram > min_ram:
        ram_bool = True

    for p in min_processors:
        if p in processor:
            processor_bool = True

    for card in graphic_cards:
        for name in GPU_NAMES:
            if name in card:
                gpu_bool = True

    return int(arch_bool and ram_bool and processor_bool and gpu_bool)


# if __name__ == '__main__':
#     print(get_av_products_installed())
