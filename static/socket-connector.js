let socket = io.connect('http://' + document.domain + ':' + location.port);

const SOCKET_DEVICE_RESPONSE = 'device response';
const EMIT_GET_MODELS = 'get models';
const SOCKET_GET_MODELS_RESPONSE = 'get models response';
const SOCKET_MAKE_PREDICTION_RESPONSE = 'make prediction response';
const SOCKET_TRAIN_MODELS_RESPONSE = 'train models response';

let deviceInfoButton = document.getElementById('device-info-submit');
let makePredictionButton = document.getElementById('make-prediction-submit');
let trainModelsButton = document.getElementById('train-models-submit');
let predictionResultCard = document.getElementById('prediction-result');

$(document).ready(function () {
    socket.on('connect', function () {

        socket.emit(EMIT_GET_MODELS, {status: "ok"});

        socket.on(SOCKET_DEVICE_RESPONSE, function (deviceInfo) {
            sessionStorage['device'] = JSON.stringify(deviceInfo);
            loadDeviceInfo();
            HideLoader();
        });

        socket.on(SOCKET_MAKE_PREDICTION_RESPONSE, function (response) {
            showPredictionResult(response['models']);
            clearSelectedModels('make-prediction-submit');
        });

        socket.on(SOCKET_GET_MODELS_RESPONSE, function (models) {
            let modelsCardIndex = 1;
            document.querySelectorAll('.placeForModels').forEach(el => {
                el.innerHTML = getModelsHtmlText(modelsCardIndex, models);
                modelsCardIndex++;
            });
        });

        socket.on(SOCKET_TRAIN_MODELS_RESPONSE, function (response) {
            let result = ""
            for (let name in response) {
                result += name + ": " + response[name] + "\n";
            }
            alert('Train: \n' + result);
            clearSelectedModels('train-models-submit');
            document.getElementById("hasDetection").checked = false;
        });

        deviceInfoButton.addEventListener('submit', function (e) {
            e.preventDefault();
            if ('device' in sessionStorage) {
                loadDeviceInfo();
            } else {
                socket.emit('device info emit', {});
                ShowLoader();
            }
        });

        makePredictionButton.addEventListener('submit', function (e) {
            predictionResultCard.innerHTML = "";
            e.stopImmediatePropagation();
            e.preventDefault();

            let models = getSelectedModels('placeForPredictionModels');
            if(models.length === 0){
                alert("Please, choose classification models");
            }
            else {

                socket.emit('make prediction emit', {
                    models: models,
                    device: JSON.parse(sessionStorage.getItem("device")),
                })
            }

        });

        trainModelsButton.addEventListener('submit', function (e) {
            e.stopImmediatePropagation();
            e.preventDefault();

            let models = getSelectedModels('placeForTrainModels');
            let hasDetection = document.getElementById("hasDetection").checked;
            if(models.length === 0){
                alert("Please, choose classification models");
            }
            else {
                socket.emit('train models emit', {
                    models: models,
                    device: JSON.parse(sessionStorage.getItem("device")),
                    hasDetections: hasDetection
                })
            }
        })

    });


    function getSelectedModels(modelsPlace) {
        return Array.prototype.slice.call(document
            .querySelectorAll("#" + modelsPlace + " input[name='models']"))
            .filter(ch => ch.checked).map(ch => ch.value);
    }

    function clearSelectedModels(idToFind){
        document.querySelectorAll("#" + idToFind + " input[name='models']").forEach(ch => ch.checked = false);
    }

    function getModelsHtmlText(modelsCardIndex, models) {
        let modelHtmlForm = "";
        for (let model in models) {
            modelHtmlForm +=
                `<div class="form-group">
                        <input name="models" type="checkbox" value="` + models[model] + `"
                               id="` + model + modelsCardIndex + `">
                        <label for="` + model + modelsCardIndex + `">` + models[model] + `</label>
                    </div>`
        }
        return modelHtmlForm;
    }

    function loadDeviceInfo(dict = JSON.parse(sessionStorage['device'])) {
        let index = 1;
        let deviceInfoText = `<div class="device-info-list m-5">
                <h3 class="device-feature card-header text-center">Feature</h3>
                <h3 class="device-value card-header text-center">Value</h3>`

        for (let key in dict) {
            deviceInfoText = deviceInfoText +
                `<div class="device-feature">
                    <div class="add-btn">
                        <span class="material-icons">add</span>
                            </div>` + key + `<div class="device-description hide"
                                    id="device-feature-` + index + `">` + dict[key]['description'] + `</div>
                                    </div>
                            <div class="device-value"> ` + dict[key]['name'] + `</div>`;
            index += 1;
        }
        deviceInfoText = deviceInfoText + `</div>`;

        document.getElementById('device-info').innerHTML = deviceInfoText;
        document.getElementById('device-info-status').innerText = "Device Info";
        deviceInfoButton.classList.add('hide');
        document.getElementById('search-device-info').addEventListener('input', searchForInfo);
        document.getElementById('search-info').classList.remove('hide');
        Array.from(document.getElementsByClassName('device-feature')).forEach(function (element) {
            element.addEventListener('click', showDescription);
        });
    }

    function showDescription() {
        this.childNodes.forEach(o => {
            if (o.id !== undefined && o.id.startsWith('device-feature-')) {
                o.classList.toggle('hide');
            }
            if (o.classList && o.classList.contains('add-btn')) {
                let el = o.childNodes[1];
                el.innerText = el.innerText === "add" ? "remove" : "add";
            }
        });
    }

    function searchForInfo(e) {
        let search = e.target.value;
        if (search === "") {
            loadDeviceInfo();
        }
        let dict = {}
        for (let key in JSON.parse(sessionStorage['device'])) {
            if (key.toLowerCase().includes(search.toLowerCase())) {
                dict[key] = JSON.parse(sessionStorage['device'])[key];
            }
        }
        loadDeviceInfo(dict);
    }

    function showPredictionResult(predictions) {
        let result = `<h2>Prediction result</h2>`;
        for (let key in predictions) {
            result = result + `
                <div class="device-info-list text-justify">
                    <div class="">` + key + `: </div>
                    <div class="">` + predictions[key] + `%</div>
               </div>
                `;
        }
        predictionResultCard.innerHTML = result;
    }

    function ShowLoader() {
        document.getElementById('preloader').classList.remove('hide');
        document.getElementById('device-info-status').innerText = "Loading...";
    }

    function HideLoader() {
        document.getElementById('preloader').classList.add('hide');
    }

    if ('device' in sessionStorage) {
        loadDeviceInfo();
    }

});

