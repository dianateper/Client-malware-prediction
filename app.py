from flask import Flask, render_template
from flask_socketio import SocketIO
from model import os_model
from tests import training_test
from connector import setup_connector, get_connector
import eventlet

eventlet.monkey_patch()

app = Flask(__name__, static_url_path='/static')
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='eventlet')

setup_connector(app)
HEROKU_URL = 'http://malware-detection-server.herokuapp.com/'
LOCAL_URL = 'http://localhost:5000/'

# socket emit
device_info_emit = 'device info emit'
make_prediction_emit = 'make prediction emit'
train_models_emit = 'train models emit'
get_models = 'get models'

# socket response
make_prediction_response = 'make prediction response'
device_response = 'device response'
get_models_response = 'get models response'
train_models_response = 'train models response'


@app.route('/', methods=['GET', 'POST'])
def init():
    return render_template('index.html')


@socketio.on(device_info_emit)
def handle_get_device_info_event(attr):
    device = os_model.DeviceInfo().data
    socketio.emit(device_response, device)


@socketio.on(make_prediction_emit)
def handle_make_prediction_event(json):
    models = json['models']

    with get_connector(app) as conn:
        data = {
            'device': json['device'],
            'models': models
        }
        response = conn.post(HEROKU_URL + 'predictions', json=data).json()
    print(response)
    socketio.emit(make_prediction_response, response)


@socketio.on(train_models_emit)
def handle_train_models_event(json):
    models = json['models']
    device = json['device']

    device['HasDetections'] = {'name': int(json['hasDetections'] == True), 'description': "has detection"}
    with get_connector(app) as conn:
        data = {
            'device': device,
            'models': models
        }
        response = conn.post(HEROKU_URL + 'retrain-one', json=data)
    print(response.text)
    socketio.emit(train_models_response, response.text)


@socketio.on(get_models)
def handle_get_models_emit(json):
    with get_connector(app) as conn:
        models = conn.get(HEROKU_URL + 'get-models').json()
    socketio.emit(get_models_response, models)


# testing function - retrain models
@app.route('/test', methods=['POST'])
def train_models():
    models = ['random-forest']
    device = training_test.load_data('data/traindata.csv')
    with get_connector(app) as conn:
        data = {
            'device': device.to_json(orient="records"),
            'models': models
        }
        response = conn.get(LOCAL_URL+'retrain', json=data)
    return {"msg": response['msg']}, 201


# testing function - retrain one models
@app.route('/test-one', methods=['POST'])
def train_one():
    models = ['random-forest']
    device = training_test.load_data('data/traindata.csv')
    device = device[:1]
    with get_connector(app) as conn:
        data = {
            'device': device.to_json(orient="records"),
            'models': models
        }
        response = conn.get(LOCAL_URL+'retrain-one', json=data)
    return {"msg": response['msg']}, 201


if __name__ == '__main__':
    socketio.run(app, port=5001, host='localhost', debug=True)
